// Code generated by "go-gen-config"; DO NOT EDIT.

package config

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/evald24/go-gen-config/pkg/helpers"
	"gopkg.in/yaml.v3"
)

type config struct {	// Debug - Debug mode
	Debug	bool	`yaml:"debug" env:"DEBUG"`	// Default: true
	// Name - App name
	Name	string	`yaml:"name"`	// Default: Evald
	// Age - Age
	Age	uint8	`yaml:"age"`	// Default: 0
	// LogLevel - Description of the variable
	LogLevel	string	`yaml:"logLevel" env:"LOG_LEVEL"`	// Default: DEBUG
	// Project - Project configuration
	Project	StructProject	`yaml:"project"`	// Default: map[description:map[description:Description of the project type:string value:My service description] environment:map[enum:[DEV STG PROD] env:PROJECT_ENV type:enum value:DEV] name:map[description:Name of the project type:string value:my-service-api] title:map[description:Title of the project type:string value:My service API]]

	Grpc	StructGrpc	`yaml:"grpc"`	// Default: map[host:map[env:GRPC_HOST type:string value:127.0.0.1] maxConnectionAge:map[description:MaxConnectionAge is a duration for the maximum amount of time a connection may exist before it will be closed by sending a GoAway. type:int64 value:5] maxConnectionAgeGrace:map[description:MaxConnectionAgeGrace is an additive period after MaxConnectionAge after which the connection will be forcibly closed. type:int64 value:5] maxConnectionIdle:map[description:MaxConnectionIdle is a duration for the amount of time after which an idle connection would be closed by sending a GoAway. type:int64 value:5] port:map[env:GRPC_PORT type:uint16 value:50051] time:map[description:After a duration of this time if the server doesn't see any activity it pings the client to see if the transport is still alive. type:int64 value:15] timeout:map[description:After having pinged for keepalive check, the server waits for a duration of Timeout and if no activity is seen even after that the connection is closed type:int64 value:15]]
}

// GetDebug - Debug mode
func GetDebug() bool {
	return cfg.Debug
}

// GetName - App name
func GetName() string {
	if cfg.Name == "" {
		return "Evald"
	}
	return cfg.Name
}

// GetAge - Age
func GetAge() uint8 {
	return cfg.Age
}

// Type - Description of the variable
type EnumLogLevel = uint8

const (
	LogLevelDebug	EnumLogLevel	= iota
	LogLevelInfo
	LogLevelWarning
	LogLevelError
)

// GetLogLevel - Description of the variable
func GetLogLevel() EnumLogLevel {
	switch cfg.LogLevel {
	case "DEBUG":
		return 0
	case "INFO":
		return 1
	case "WARNING":
		return 2
	case "ERROR":
		return 3
	default:
		return 0
	}
}

// GetProject - Project configuration
func GetProject() StructProject {
	return cfg.Project
}

type StructProject struct {
	// Description - Description of the project
	Description	string	`yaml:"description"`	// Default: My service description
	// Environment -
	Environment	string	`yaml:"environment" env:"PROJECT_ENV"`	// Default: DEV
	// Name - Name of the project
	Name	string	`yaml:"name"`	// Default: my-service-api
	// Title - Title of the project
	Title	string	`yaml:"title"`	// Default: My service API
}

// GetGrpc - ...
func GetGrpc() StructGrpc {
	return cfg.Grpc
}

type StructGrpc struct {
	// Host -
	Host	string	`yaml:"host" env:"GRPC_HOST"`	// Default: 127.0.0.1
	// Port -
	Port	uint16	`yaml:"port" env:"GRPC_PORT"`	// Default: 50051
	// MaxConnectionIdle - MaxConnectionIdle is a duration for the amount of time after which an idle connection would be closed by sending a GoAway.
	MaxConnectionIdle	int64	`yaml:"maxConnectionIdle"`	// Default: 5
	// MaxConnectionAge - MaxConnectionAge is a duration for the maximum amount of time a connection may exist before it will be closed by sending a GoAway.
	MaxConnectionAge	int64	`yaml:"maxConnectionAge"`	// Default: 5
	// MaxConnectionAgeGrace - MaxConnectionAgeGrace is an additive period after MaxConnectionAge after which the connection will be forcibly closed.
	MaxConnectionAgeGrace	int64	`yaml:"maxConnectionAgeGrace"`	// Default: 5
	// Time - After a duration of this time if the server doesn't see any activity it pings the client to see if the transport is still alive.
	Time	int64	`yaml:"time"`	// Default: 15
	// Timeout - After having pinged for keepalive check, the server waits for a duration of Timeout and if no activity is seen even after that the connection is closed
	Timeout	int64	`yaml:"timeout"`	// Default: 15
}

var fileConfig string
var cfg *config

func Init(configPath string) error {
	fileConfig = configPath

	if err := UpdateConfig(); err != nil {
		return fmt.Errorf("Configuration initialization failed: %v", err)
	}

	hotReload := make(chan os.Signal, 1)
	signal.Notify(hotReload, syscall.SIGHUP)

	go func() {
		for {
			<-hotReload
			UpdateConfig()
		}
	}()

	return nil
}

// UpdateConfig - Updates the config by rereading.
func UpdateConfig() error {
	file, err := os.Open(fileConfig)
	if err != nil {
		return err
	}
	defer file.Close()

	decoder := yaml.NewDecoder(file)
	if err := decoder.Decode(&cfg); err != nil {
		return err
	}

	// read environment and replace
	return helpers.ReadEnvAndSet(cfg)
}
