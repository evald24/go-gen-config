// Code generated by "go-gen-config"; DO NOT EDIT.

package config

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/evald24/go-gen-config/pkg/helpers"
	"gopkg.in/yaml.v3"
)

// Conifg - Basic structure with configuration
type Config struct {
	// LogLevel - Description of the variable
	LogLevel EnumLogLevel `yaml:"logLevel" env:"LOG_LEVEL" default:"DEBUG"` // Default: DEBUG
	// Project - Project configuration
	Project StructProject `yaml:"project"`
	// Grpc -
	Grpc StructGrpc `yaml:"grpc"`
	// Debug - Debug mode
	Debug bool `yaml:"debug" env:"DEBUG" default:"true"` // Default: true
	// Name - App name
	Name string `yaml:"name" default:"Evald"` // Default: Evald
	// Age - Age
	Age uint8 `yaml:"age" default:"0"` // Default: 0
}

// EnumLogLevel - Description of the variable
type EnumLogLevel = string

const (
	// LogLevelDebug - Description of the variable
	LogLevelDebug EnumLogLevel = "DEBUG"
	// LogLevelInfo - Description of the variable
	LogLevelInfo = "INFO"
	// LogLevelWarning - Description of the variable
	LogLevelWarning = "WARNING"
	// LogLevelError - Description of the variable
	LogLevelError = "ERROR"
)

// StructProject - Project configuration
type StructProject struct {
	// Name - Name of the project
	Name string `yaml:"name" default:"my-service-api"` // Default: my-service-api
	// Title - Title of the project
	Title string `yaml:"title" default:"My service API"` // Default: My service API
	// Description - Description of the project
	Description string `yaml:"description" default:"My service description"` // Default: My service description
	// Environment -
	Environment EnumProjectEnvironment `yaml:"environment" env:"PROJECT_ENV" default:"DEV"` // Default: DEV
}

// EnumProjectEnvironment -
type EnumProjectEnvironment = string

const (
	// ProjectEnvironmentDev -
	ProjectEnvironmentDev EnumProjectEnvironment = "DEV"
	// ProjectEnvironmentStg -
	ProjectEnvironmentStg = "STG"
	// ProjectEnvironmentProd -
	ProjectEnvironmentProd = "PROD"
)

// StructGrpc -
type StructGrpc struct {
	// Host -
	Host string `yaml:"host" env:"GRPC_HOST" default:"127.0.0.1"` // Default: 127.0.0.1
	// Port -
	Port uint16 `yaml:"port" env:"GRPC_PORT" default:"50051"` // Default: 50051
	// MaxConnectionIdle - MaxConnectionIdle is a duration for the amount of time after which an idle connection would be closed by sending a GoAway.
	MaxConnectionIdle int64 `yaml:"maxConnectionIdle" default:"5"` // Default: 5
	// MaxConnectionAge - MaxConnectionAge is a duration for the maximum amount of time a connection may exist before it will be closed by sending a GoAway.
	MaxConnectionAge int64 `yaml:"maxConnectionAge" default:"5"` // Default: 5
	// MaxConnectionAgeGrace - MaxConnectionAgeGrace is an additive period after MaxConnectionAge after which the connection will be forcibly closed.
	MaxConnectionAgeGrace int64 `yaml:"maxConnectionAgeGrace" default:"5"` // Default: 5
	// Time - After a duration of this time if the server doesn't see any activity it pings the client to see if the transport is still alive.
	Time int64 `yaml:"time" default:"15"` // Default: 15
	// Timeout - After having pinged for keepalive check, the server waits for a duration of Timeout and if no activity is seen even after that the connection is closed
	Timeout int64 `yaml:"timeout" default:"15"` // Default: 15
}

// GetConfig - get the configuration
func GetConfig() Config {
	return *cfg
}

var fileConfig string
var cfg *Config

// Init - initializing the configuration
func Init(configPath string) error {
	fileConfig = configPath

	if err := UpdateConfig(); err != nil {
		return fmt.Errorf("Configuration initialization failed: %v", err)
	}

	hotReload := make(chan os.Signal, 1)
	signal.Notify(hotReload, syscall.SIGHUP)

	go func() {
		for {
			<-hotReload
			UpdateConfig()
		}
	}()

	return nil
}

// UpdateConfig - Updates the configuration by rereading
func UpdateConfig() error {
	file, err := os.Open(fileConfig)
	if err != nil {
		return err
	}
	defer file.Close()

	decoder := yaml.NewDecoder(file)
	if err := decoder.Decode(&cfg); err != nil {
		return err
	}

	// read environment and replace
	return helpers.ReadEnvAndSet(cfg)
}
